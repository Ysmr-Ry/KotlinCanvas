{"version":3,"file":"HelloJS.js","sources":["canvas.kt","collections/Collections.kt"],"sourcesContent":[null,"/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.comparisons.compareValues\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean): Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/** Returns an empty read-only list.  The returned list is serializable (JVM). */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/** Returns a new read-only list of given elements.  The returned list is serializable (JVM). */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/** Returns an empty read-only list.  The returned list is serializable (JVM). */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n/** Returns an empty new [MutableList]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/** Returns an empty new [ArrayList]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/** Returns a new [MutableList] with the given elements. */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/** Returns a new [ArrayList] with the given elements. */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/** Returns a new read-only list either of single given element, if it is not null, or empty list it the element is null. The returned list is serializable (JVM). */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/** Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM). */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/** Returns `true` if the collection is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/** Returns this Collection if it's not `null` and the empty list otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/** Returns this List if it's not `null` and the empty list otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic fun <T: Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(key: K?, fromIndex: Int = 0, toIndex: Int = size, crossinline selector: (T) -> K?): Int =\n        binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n"],"names":[],"mappings":"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"}